/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: wflow.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum Status {
    UNKNOWN = 0,
    INTERNAL = 1,
    INVALID = 2,
    OK = 3
}
export enum Type {
    PING = 0,
    PONG = 1,
    RESPONSE = 2,
    DISPATCH_JOB = 3,
    QUERY_JOB = 4,
    CANCEL_JOB = 5,
    QUERY_WORKER_STATUS = 6,
    DISCONNECT_WORKER = 7,
    JOB_UPDATE = 8,
    WORKER_READY = 10,
    UPLOAD_LOGS = 11,
    CUSTOM = 100
}
export enum JobStatus {
    PENDING = 0,
    DISPATCHED = 1,
    RUNNING = 2,
    SUCCESS = 3,
    FAILED = 4,
    CANCELLED = 5
}
export enum WorkerStatus {
    OFFLINE = 0,
    ONLINE = 1,
    ACTIVE = 2
}
export enum LogLevel {
    DEBUG = 0,
    INFO = 1,
    WARN = 2,
    ERROR = 3,
    FATAL = 4
}
export class Message extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        header?: Map<string, string>;
        payload?: Uint8Array;
        type?: Type;
        status?: Status;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("payload" in data && data.payload != undefined) {
                this.payload = data.payload;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
        }
        if (!this.header)
            this.header = new Map();
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get header() {
        return pb_1.Message.getField(this, 4) as any as Map<string, string>;
    }
    set header(value: Map<string, string>) {
        pb_1.Message.setField(this, 4, value as any);
    }
    get payload() {
        return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
    }
    set payload(value: Uint8Array) {
        pb_1.Message.setField(this, 5, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 6, Type.PING) as Type;
    }
    set type(value: Type) {
        pb_1.Message.setField(this, 6, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 7, Status.UNKNOWN) as Status;
    }
    set status(value: Status) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        id?: string;
        header?: {
            [key: string]: string;
        };
        payload?: Uint8Array;
        type?: Type;
        status?: Status;
    }): Message {
        const message = new Message({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (typeof data.header == "object") {
            message.header = new Map(Object.entries(data.header));
        }
        if (data.payload != null) {
            message.payload = data.payload;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            header?: {
                [key: string]: string;
            };
            payload?: Uint8Array;
            type?: Type;
            status?: Status;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.header != null) {
            data.header = (Object.fromEntries)(this.header);
        }
        if (this.payload != null) {
            data.payload = this.payload;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        for (const [key, value] of this.header) {
            writer.writeMessage(4, this.header, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (this.payload.length)
            writer.writeBytes(5, this.payload);
        if (this.type != Type.PING)
            writer.writeEnum(6, this.type);
        if (this.status != Status.UNKNOWN)
            writer.writeEnum(7, this.status);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.header as any, reader, reader.readString, reader.readString));
                    break;
                case 5:
                    message.payload = reader.readBytes();
                    break;
                case 6:
                    message.type = reader.readEnum();
                    break;
                case 7:
                    message.status = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Message {
        return Message.deserialize(bytes);
    }
}
export class Activity extends pb_1.Message {
    #one_of_decls: number[][] = [[3]];
    constructor(data?: any[] | ({
        id?: string;
        name?: string;
    } & (({
        description?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_description() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _description() {
        const cases: {
            [index: number]: "none" | "description";
        } = {
            0: "none",
            3: "description"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        description?: string;
    }): Activity {
        const message = new Activity({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            description?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.has_description)
            writer.writeString(3, this.description);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Activity {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Activity();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Activity {
        return Activity.deserialize(bytes);
    }
}
export class Job extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        activity_id?: string;
        param?: Uint8Array;
        dispatch_time_in_seconds?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("activity_id" in data && data.activity_id != undefined) {
                this.activity_id = data.activity_id;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
            if ("dispatch_time_in_seconds" in data && data.dispatch_time_in_seconds != undefined) {
                this.dispatch_time_in_seconds = data.dispatch_time_in_seconds;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get activity_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set activity_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get param() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
    }
    set param(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get dispatch_time_in_seconds() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set dispatch_time_in_seconds(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: string;
        activity_id?: string;
        param?: Uint8Array;
        dispatch_time_in_seconds?: number;
    }): Job {
        const message = new Job({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.activity_id != null) {
            message.activity_id = data.activity_id;
        }
        if (data.param != null) {
            message.param = data.param;
        }
        if (data.dispatch_time_in_seconds != null) {
            message.dispatch_time_in_seconds = data.dispatch_time_in_seconds;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            activity_id?: string;
            param?: Uint8Array;
            dispatch_time_in_seconds?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.activity_id != null) {
            data.activity_id = this.activity_id;
        }
        if (this.param != null) {
            data.param = this.param;
        }
        if (this.dispatch_time_in_seconds != null) {
            data.dispatch_time_in_seconds = this.dispatch_time_in_seconds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.activity_id.length)
            writer.writeString(2, this.activity_id);
        if (this.param.length)
            writer.writeBytes(3, this.param);
        if (this.dispatch_time_in_seconds != 0)
            writer.writeInt32(4, this.dispatch_time_in_seconds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Job {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Job();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.activity_id = reader.readString();
                    break;
                case 3:
                    message.param = reader.readBytes();
                    break;
                case 4:
                    message.dispatch_time_in_seconds = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Job {
        return Job.deserialize(bytes);
    }
}
export class JobReport extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        job?: Job;
        worker_id?: string;
        result?: Uint8Array;
        job_started_time_seconds?: number;
        status?: JobStatus;
        failure_reason?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("job" in data && data.job != undefined) {
                this.job = data.job;
            }
            if ("worker_id" in data && data.worker_id != undefined) {
                this.worker_id = data.worker_id;
            }
            if ("result" in data && data.result != undefined) {
                this.result = data.result;
            }
            if ("job_started_time_seconds" in data && data.job_started_time_seconds != undefined) {
                this.job_started_time_seconds = data.job_started_time_seconds;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("failure_reason" in data && data.failure_reason != undefined) {
                this.failure_reason = data.failure_reason;
            }
        }
    }
    get job() {
        return pb_1.Message.getWrapperField(this, Job, 1) as Job;
    }
    set job(value: Job) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_job() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get worker_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set worker_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get result() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
    }
    set result(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get job_started_time_seconds() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set job_started_time_seconds(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 5, JobStatus.PENDING) as JobStatus;
    }
    set status(value: JobStatus) {
        pb_1.Message.setField(this, 5, value);
    }
    get failure_reason() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set failure_reason(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        job?: ReturnType<typeof Job.prototype.toObject>;
        worker_id?: string;
        result?: Uint8Array;
        job_started_time_seconds?: number;
        status?: JobStatus;
        failure_reason?: string;
    }): JobReport {
        const message = new JobReport({});
        if (data.job != null) {
            message.job = Job.fromObject(data.job);
        }
        if (data.worker_id != null) {
            message.worker_id = data.worker_id;
        }
        if (data.result != null) {
            message.result = data.result;
        }
        if (data.job_started_time_seconds != null) {
            message.job_started_time_seconds = data.job_started_time_seconds;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.failure_reason != null) {
            message.failure_reason = data.failure_reason;
        }
        return message;
    }
    toObject() {
        const data: {
            job?: ReturnType<typeof Job.prototype.toObject>;
            worker_id?: string;
            result?: Uint8Array;
            job_started_time_seconds?: number;
            status?: JobStatus;
            failure_reason?: string;
        } = {};
        if (this.job != null) {
            data.job = this.job.toObject();
        }
        if (this.worker_id != null) {
            data.worker_id = this.worker_id;
        }
        if (this.result != null) {
            data.result = this.result;
        }
        if (this.job_started_time_seconds != null) {
            data.job_started_time_seconds = this.job_started_time_seconds;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.failure_reason != null) {
            data.failure_reason = this.failure_reason;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_job)
            writer.writeMessage(1, this.job, () => this.job.serialize(writer));
        if (this.worker_id.length)
            writer.writeString(2, this.worker_id);
        if (this.result.length)
            writer.writeBytes(3, this.result);
        if (this.job_started_time_seconds != 0)
            writer.writeInt32(4, this.job_started_time_seconds);
        if (this.status != JobStatus.PENDING)
            writer.writeEnum(5, this.status);
        if (this.failure_reason.length)
            writer.writeString(6, this.failure_reason);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobReport {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JobReport();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.job, () => message.job = Job.deserialize(reader));
                    break;
                case 2:
                    message.worker_id = reader.readString();
                    break;
                case 3:
                    message.result = reader.readBytes();
                    break;
                case 4:
                    message.job_started_time_seconds = reader.readInt32();
                    break;
                case 5:
                    message.status = reader.readEnum();
                    break;
                case 6:
                    message.failure_reason = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JobReport {
        return JobReport.deserialize(bytes);
    }
}
export class ActivityWithJobIDs extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        activity?: Activity;
        job_ids?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("activity" in data && data.activity != undefined) {
                this.activity = data.activity;
            }
            if ("job_ids" in data && data.job_ids != undefined) {
                this.job_ids = data.job_ids;
            }
        }
    }
    get activity() {
        return pb_1.Message.getWrapperField(this, Activity, 1) as Activity;
    }
    set activity(value: Activity) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_activity() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get job_ids() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set job_ids(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        activity?: ReturnType<typeof Activity.prototype.toObject>;
        job_ids?: string[];
    }): ActivityWithJobIDs {
        const message = new ActivityWithJobIDs({});
        if (data.activity != null) {
            message.activity = Activity.fromObject(data.activity);
        }
        if (data.job_ids != null) {
            message.job_ids = data.job_ids;
        }
        return message;
    }
    toObject() {
        const data: {
            activity?: ReturnType<typeof Activity.prototype.toObject>;
            job_ids?: string[];
        } = {};
        if (this.activity != null) {
            data.activity = this.activity.toObject();
        }
        if (this.job_ids != null) {
            data.job_ids = this.job_ids;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_activity)
            writer.writeMessage(1, this.activity, () => this.activity.serialize(writer));
        if (this.job_ids.length)
            writer.writeRepeatedString(2, this.job_ids);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityWithJobIDs {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActivityWithJobIDs();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.activity, () => message.activity = Activity.deserialize(reader));
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ActivityWithJobIDs {
        return ActivityWithJobIDs.deserialize(bytes);
    }
}
export class Worker extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        id?: string;
        system_stat?: SystemStat;
        active_jobs?: string[];
        supported_activities?: Activity[];
        worker_status?: WorkerStatus;
        created_at_seconds?: number;
    } & (({
        connected_server?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("system_stat" in data && data.system_stat != undefined) {
                this.system_stat = data.system_stat;
            }
            if ("active_jobs" in data && data.active_jobs != undefined) {
                this.active_jobs = data.active_jobs;
            }
            if ("connected_server" in data && data.connected_server != undefined) {
                this.connected_server = data.connected_server;
            }
            if ("supported_activities" in data && data.supported_activities != undefined) {
                this.supported_activities = data.supported_activities;
            }
            if ("worker_status" in data && data.worker_status != undefined) {
                this.worker_status = data.worker_status;
            }
            if ("created_at_seconds" in data && data.created_at_seconds != undefined) {
                this.created_at_seconds = data.created_at_seconds;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get system_stat() {
        return pb_1.Message.getWrapperField(this, SystemStat, 2) as SystemStat;
    }
    set system_stat(value: SystemStat) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_system_stat() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get active_jobs() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
    }
    set active_jobs(value: string[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get connected_server() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set connected_server(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_connected_server() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get supported_activities() {
        return pb_1.Message.getRepeatedWrapperField(this, Activity, 5) as Activity[];
    }
    set supported_activities(value: Activity[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get worker_status() {
        return pb_1.Message.getFieldWithDefault(this, 6, WorkerStatus.OFFLINE) as WorkerStatus;
    }
    set worker_status(value: WorkerStatus) {
        pb_1.Message.setField(this, 6, value);
    }
    get created_at_seconds() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set created_at_seconds(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get _connected_server() {
        const cases: {
            [index: number]: "none" | "connected_server";
        } = {
            0: "none",
            4: "connected_server"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        id?: string;
        system_stat?: ReturnType<typeof SystemStat.prototype.toObject>;
        active_jobs?: string[];
        connected_server?: string;
        supported_activities?: ReturnType<typeof Activity.prototype.toObject>[];
        worker_status?: WorkerStatus;
        created_at_seconds?: number;
    }): Worker {
        const message = new Worker({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.system_stat != null) {
            message.system_stat = SystemStat.fromObject(data.system_stat);
        }
        if (data.active_jobs != null) {
            message.active_jobs = data.active_jobs;
        }
        if (data.connected_server != null) {
            message.connected_server = data.connected_server;
        }
        if (data.supported_activities != null) {
            message.supported_activities = data.supported_activities.map(item => Activity.fromObject(item));
        }
        if (data.worker_status != null) {
            message.worker_status = data.worker_status;
        }
        if (data.created_at_seconds != null) {
            message.created_at_seconds = data.created_at_seconds;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            system_stat?: ReturnType<typeof SystemStat.prototype.toObject>;
            active_jobs?: string[];
            connected_server?: string;
            supported_activities?: ReturnType<typeof Activity.prototype.toObject>[];
            worker_status?: WorkerStatus;
            created_at_seconds?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.system_stat != null) {
            data.system_stat = this.system_stat.toObject();
        }
        if (this.active_jobs != null) {
            data.active_jobs = this.active_jobs;
        }
        if (this.connected_server != null) {
            data.connected_server = this.connected_server;
        }
        if (this.supported_activities != null) {
            data.supported_activities = this.supported_activities.map((item: Activity) => item.toObject());
        }
        if (this.worker_status != null) {
            data.worker_status = this.worker_status;
        }
        if (this.created_at_seconds != null) {
            data.created_at_seconds = this.created_at_seconds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.has_system_stat)
            writer.writeMessage(2, this.system_stat, () => this.system_stat.serialize(writer));
        if (this.active_jobs.length)
            writer.writeRepeatedString(3, this.active_jobs);
        if (this.has_connected_server)
            writer.writeString(4, this.connected_server);
        if (this.supported_activities.length)
            writer.writeRepeatedMessage(5, this.supported_activities, (item: Activity) => item.serialize(writer));
        if (this.worker_status != WorkerStatus.OFFLINE)
            writer.writeEnum(6, this.worker_status);
        if (this.created_at_seconds != 0)
            writer.writeInt64(7, this.created_at_seconds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Worker {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Worker();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.system_stat, () => message.system_stat = SystemStat.deserialize(reader));
                    break;
                case 3:
                    pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                    break;
                case 4:
                    message.connected_server = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.supported_activities, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Activity.deserialize(reader), Activity));
                    break;
                case 6:
                    message.worker_status = reader.readEnum();
                    break;
                case 7:
                    message.created_at_seconds = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Worker {
        return Worker.deserialize(bytes);
    }
}
export class Server extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        connected_workers?: string[];
        uptime_in_seconds?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("connected_workers" in data && data.connected_workers != undefined) {
                this.connected_workers = data.connected_workers;
            }
            if ("uptime_in_seconds" in data && data.uptime_in_seconds != undefined) {
                this.uptime_in_seconds = data.uptime_in_seconds;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get connected_workers() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set connected_workers(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    get uptime_in_seconds() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set uptime_in_seconds(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: string;
        connected_workers?: string[];
        uptime_in_seconds?: number;
    }): Server {
        const message = new Server({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.connected_workers != null) {
            message.connected_workers = data.connected_workers;
        }
        if (data.uptime_in_seconds != null) {
            message.uptime_in_seconds = data.uptime_in_seconds;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            connected_workers?: string[];
            uptime_in_seconds?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.connected_workers != null) {
            data.connected_workers = this.connected_workers;
        }
        if (this.uptime_in_seconds != null) {
            data.uptime_in_seconds = this.uptime_in_seconds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.connected_workers.length)
            writer.writeRepeatedString(2, this.connected_workers);
        if (this.uptime_in_seconds != 0)
            writer.writeInt32(3, this.uptime_in_seconds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Server {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Server();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                case 3:
                    message.uptime_in_seconds = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Server {
        return Server.deserialize(bytes);
    }
}
export class SystemStat extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        cpu_count?: number;
        available_memory_in_bytes?: number;
        total_memory_in_bytes?: number;
        cpu_usage?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("cpu_count" in data && data.cpu_count != undefined) {
                this.cpu_count = data.cpu_count;
            }
            if ("available_memory_in_bytes" in data && data.available_memory_in_bytes != undefined) {
                this.available_memory_in_bytes = data.available_memory_in_bytes;
            }
            if ("total_memory_in_bytes" in data && data.total_memory_in_bytes != undefined) {
                this.total_memory_in_bytes = data.total_memory_in_bytes;
            }
            if ("cpu_usage" in data && data.cpu_usage != undefined) {
                this.cpu_usage = data.cpu_usage;
            }
        }
    }
    get cpu_count() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set cpu_count(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get available_memory_in_bytes() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set available_memory_in_bytes(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get total_memory_in_bytes() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set total_memory_in_bytes(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get cpu_usage() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set cpu_usage(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        cpu_count?: number;
        available_memory_in_bytes?: number;
        total_memory_in_bytes?: number;
        cpu_usage?: number;
    }): SystemStat {
        const message = new SystemStat({});
        if (data.cpu_count != null) {
            message.cpu_count = data.cpu_count;
        }
        if (data.available_memory_in_bytes != null) {
            message.available_memory_in_bytes = data.available_memory_in_bytes;
        }
        if (data.total_memory_in_bytes != null) {
            message.total_memory_in_bytes = data.total_memory_in_bytes;
        }
        if (data.cpu_usage != null) {
            message.cpu_usage = data.cpu_usage;
        }
        return message;
    }
    toObject() {
        const data: {
            cpu_count?: number;
            available_memory_in_bytes?: number;
            total_memory_in_bytes?: number;
            cpu_usage?: number;
        } = {};
        if (this.cpu_count != null) {
            data.cpu_count = this.cpu_count;
        }
        if (this.available_memory_in_bytes != null) {
            data.available_memory_in_bytes = this.available_memory_in_bytes;
        }
        if (this.total_memory_in_bytes != null) {
            data.total_memory_in_bytes = this.total_memory_in_bytes;
        }
        if (this.cpu_usage != null) {
            data.cpu_usage = this.cpu_usage;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.cpu_count != 0)
            writer.writeInt32(2, this.cpu_count);
        if (this.available_memory_in_bytes != 0)
            writer.writeInt32(3, this.available_memory_in_bytes);
        if (this.total_memory_in_bytes != 0)
            writer.writeInt32(4, this.total_memory_in_bytes);
        if (this.cpu_usage != 0)
            writer.writeInt32(5, this.cpu_usage);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SystemStat {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SystemStat();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.cpu_count = reader.readInt32();
                    break;
                case 3:
                    message.available_memory_in_bytes = reader.readInt32();
                    break;
                case 4:
                    message.total_memory_in_bytes = reader.readInt32();
                    break;
                case 5:
                    message.cpu_usage = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SystemStat {
        return SystemStat.deserialize(bytes);
    }
}
export class JobLog extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        job_id?: string;
        timestamp?: number;
        level?: LogLevel;
        message?: string;
        contexts?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("job_id" in data && data.job_id != undefined) {
                this.job_id = data.job_id;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("contexts" in data && data.contexts != undefined) {
                this.contexts = data.contexts;
            }
        }
        if (!this.contexts)
            this.contexts = new Map();
    }
    get job_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set job_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 3, LogLevel.DEBUG) as LogLevel;
    }
    set level(value: LogLevel) {
        pb_1.Message.setField(this, 3, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get contexts() {
        return pb_1.Message.getField(this, 5) as any as Map<string, string>;
    }
    set contexts(value: Map<string, string>) {
        pb_1.Message.setField(this, 5, value as any);
    }
    static fromObject(data: {
        job_id?: string;
        timestamp?: number;
        level?: LogLevel;
        message?: string;
        contexts?: {
            [key: string]: string;
        };
    }): JobLog {
        const message = new JobLog({});
        if (data.job_id != null) {
            message.job_id = data.job_id;
        }
        if (data.timestamp != null) {
            message.timestamp = data.timestamp;
        }
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (typeof data.contexts == "object") {
            message.contexts = new Map(Object.entries(data.contexts));
        }
        return message;
    }
    toObject() {
        const data: {
            job_id?: string;
            timestamp?: number;
            level?: LogLevel;
            message?: string;
            contexts?: {
                [key: string]: string;
            };
        } = {};
        if (this.job_id != null) {
            data.job_id = this.job_id;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.contexts != null) {
            data.contexts = (Object.fromEntries)(this.contexts);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.job_id.length)
            writer.writeString(1, this.job_id);
        if (this.timestamp != 0)
            writer.writeInt32(2, this.timestamp);
        if (this.level != LogLevel.DEBUG)
            writer.writeEnum(3, this.level);
        if (this.message.length)
            writer.writeString(4, this.message);
        for (const [key, value] of this.contexts) {
            writer.writeMessage(5, this.contexts, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobLog {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JobLog();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.job_id = reader.readString();
                    break;
                case 2:
                    message.timestamp = reader.readInt32();
                    break;
                case 3:
                    message.level = reader.readEnum();
                    break;
                case 4:
                    message.message = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.contexts as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JobLog {
        return JobLog.deserialize(bytes);
    }
}
export class WrappedLogs extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        logs?: JobLog[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("logs" in data && data.logs != undefined) {
                this.logs = data.logs;
            }
        }
    }
    get logs() {
        return pb_1.Message.getRepeatedWrapperField(this, JobLog, 1) as JobLog[];
    }
    set logs(value: JobLog[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        logs?: ReturnType<typeof JobLog.prototype.toObject>[];
    }): WrappedLogs {
        const message = new WrappedLogs({});
        if (data.logs != null) {
            message.logs = data.logs.map(item => JobLog.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            logs?: ReturnType<typeof JobLog.prototype.toObject>[];
        } = {};
        if (this.logs != null) {
            data.logs = this.logs.map((item: JobLog) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.logs.length)
            writer.writeRepeatedMessage(1, this.logs, (item: JobLog) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WrappedLogs {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WrappedLogs();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.logs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, JobLog.deserialize(reader), JobLog));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WrappedLogs {
        return WrappedLogs.deserialize(bytes);
    }
}
export class AdminWorkersResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        workers?: Map<string, Worker>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("workers" in data && data.workers != undefined) {
                this.workers = data.workers;
            }
        }
        if (!this.workers)
            this.workers = new Map();
    }
    get workers() {
        return pb_1.Message.getField(this, 1) as any as Map<string, Worker>;
    }
    set workers(value: Map<string, Worker>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    static fromObject(data: {
        workers?: {
            [key: string]: ReturnType<typeof Worker.prototype.toObject>;
        };
    }): AdminWorkersResponse {
        const message = new AdminWorkersResponse({});
        if (typeof data.workers == "object") {
            message.workers = new Map(Object.entries(data.workers).map(([key, value]) => [key, Worker.fromObject(value)]));
        }
        return message;
    }
    toObject() {
        const data: {
            workers?: {
                [key: string]: ReturnType<typeof Worker.prototype.toObject>;
            };
        } = {};
        if (this.workers != null) {
            data.workers = (Object.fromEntries)((Array.from)(this.workers).map(([key, value]) => [key, value.toObject()]));
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.workers) {
            writer.writeMessage(1, this.workers, () => {
                writer.writeString(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminWorkersResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminWorkersResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.workers as any, reader, reader.readString, () => {
                        let value;
                        reader.readMessage(message, () => value = Worker.deserialize(reader));
                        return value;
                    }));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminWorkersResponse {
        return AdminWorkersResponse.deserialize(bytes);
    }
}
export class AdminJobsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        reports?: Map<string, JobReport>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("reports" in data && data.reports != undefined) {
                this.reports = data.reports;
            }
        }
        if (!this.reports)
            this.reports = new Map();
    }
    get reports() {
        return pb_1.Message.getField(this, 1) as any as Map<string, JobReport>;
    }
    set reports(value: Map<string, JobReport>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    static fromObject(data: {
        reports?: {
            [key: string]: ReturnType<typeof JobReport.prototype.toObject>;
        };
    }): AdminJobsResponse {
        const message = new AdminJobsResponse({});
        if (typeof data.reports == "object") {
            message.reports = new Map(Object.entries(data.reports).map(([key, value]) => [key, JobReport.fromObject(value)]));
        }
        return message;
    }
    toObject() {
        const data: {
            reports?: {
                [key: string]: ReturnType<typeof JobReport.prototype.toObject>;
            };
        } = {};
        if (this.reports != null) {
            data.reports = (Object.fromEntries)((Array.from)(this.reports).map(([key, value]) => [key, value.toObject()]));
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.reports) {
            writer.writeMessage(1, this.reports, () => {
                writer.writeString(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminJobsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminJobsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.reports as any, reader, reader.readString, () => {
                        let value;
                        reader.readMessage(message, () => value = JobReport.deserialize(reader));
                        return value;
                    }));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminJobsResponse {
        return AdminJobsResponse.deserialize(bytes);
    }
}
export class AdminActivitiesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        activities?: Map<string, Activity>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("activities" in data && data.activities != undefined) {
                this.activities = data.activities;
            }
        }
        if (!this.activities)
            this.activities = new Map();
    }
    get activities() {
        return pb_1.Message.getField(this, 1) as any as Map<string, Activity>;
    }
    set activities(value: Map<string, Activity>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    static fromObject(data: {
        activities?: {
            [key: string]: ReturnType<typeof Activity.prototype.toObject>;
        };
    }): AdminActivitiesResponse {
        const message = new AdminActivitiesResponse({});
        if (typeof data.activities == "object") {
            message.activities = new Map(Object.entries(data.activities).map(([key, value]) => [key, Activity.fromObject(value)]));
        }
        return message;
    }
    toObject() {
        const data: {
            activities?: {
                [key: string]: ReturnType<typeof Activity.prototype.toObject>;
            };
        } = {};
        if (this.activities != null) {
            data.activities = (Object.fromEntries)((Array.from)(this.activities).map(([key, value]) => [key, value.toObject()]));
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.activities) {
            writer.writeMessage(1, this.activities, () => {
                writer.writeString(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminActivitiesResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminActivitiesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.activities as any, reader, reader.readString, () => {
                        let value;
                        reader.readMessage(message, () => value = Activity.deserialize(reader));
                        return value;
                    }));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminActivitiesResponse {
        return AdminActivitiesResponse.deserialize(bytes);
    }
}
export class AdminActivitiesWithJobIDsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        activities?: Map<string, ActivityWithJobIDs>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("activities" in data && data.activities != undefined) {
                this.activities = data.activities;
            }
        }
        if (!this.activities)
            this.activities = new Map();
    }
    get activities() {
        return pb_1.Message.getField(this, 1) as any as Map<string, ActivityWithJobIDs>;
    }
    set activities(value: Map<string, ActivityWithJobIDs>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    static fromObject(data: {
        activities?: {
            [key: string]: ReturnType<typeof ActivityWithJobIDs.prototype.toObject>;
        };
    }): AdminActivitiesWithJobIDsResponse {
        const message = new AdminActivitiesWithJobIDsResponse({});
        if (typeof data.activities == "object") {
            message.activities = new Map(Object.entries(data.activities).map(([key, value]) => [key, ActivityWithJobIDs.fromObject(value)]));
        }
        return message;
    }
    toObject() {
        const data: {
            activities?: {
                [key: string]: ReturnType<typeof ActivityWithJobIDs.prototype.toObject>;
            };
        } = {};
        if (this.activities != null) {
            data.activities = (Object.fromEntries)((Array.from)(this.activities).map(([key, value]) => [key, value.toObject()]));
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.activities) {
            writer.writeMessage(1, this.activities, () => {
                writer.writeString(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminActivitiesWithJobIDsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminActivitiesWithJobIDsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.activities as any, reader, reader.readString, () => {
                        let value;
                        reader.readMessage(message, () => value = ActivityWithJobIDs.deserialize(reader));
                        return value;
                    }));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminActivitiesWithJobIDsResponse {
        return AdminActivitiesWithJobIDsResponse.deserialize(bytes);
    }
}
